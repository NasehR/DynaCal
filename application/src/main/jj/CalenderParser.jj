//TODO:
// Comment
// Document
PARSER_BEGIN(CalendarParser)

import edu.curtin.dynacal.api.AllDayCalendarEvent;
import edu.curtin.dynacal.api.IEvent;
import edu.curtin.dynacal.api.TODCalendarEvent;
import java.io.*;
import java.text.ParseException;
import java.time.LocalDate;
import java.time.LocalTime;
import java.util.HashMap;
import java.util.Map;
import java.util.ArrayList;
import java.util.List;

public class CalendarParser {
    private List<IEvent> eventList = new ArrayList<>();
    private Map<String, Map<String, String>> plugInInfo = new HashMap<>();

    public List<IEvent> getEventList() {
        return eventList;
    }

    public Map<String, Map<String, String>> getPlugInInfo() {
        return plugInInfo;
    }

    public static void parse(String filename) throws IOException, ParseException {
        CalendarParser p = new CalendarParser(new FileInputStream(filename));
        p.dsl();
    }
}

PARSER_END(CalendarParser)

SKIP: { " " | "\t" | "\n" | "\r" }

TOKEN: {
  < DATE: "[0-9]{4}-[0-9]{2}-[0-9]{2}" > |
  < TIME: "[0-9]{2}:[0-9]{2}:[0-9]{2}" > |
  < DURATION: "(\d+)" > |
  < STRING: "\"" (~["\""])* "\"" > |
  < EVENT: "event" > |
  < ALLDAY: "allday" > |
  < KEY: "\w+" >
}

void dsl():
{
    IEvent event;
}
{
    event = event()
    {
        eventList.add(event);
    }
//    | pluginName = <PLUGIN> "{" pluginKeyValuePairs = pluginKeyValuePairs() "}"
}

IEvent event():
{
    LocalDate date;
    LocalTime time;
    int duration;
    String eventName;
}
{
    <EVENT> date = <DATE> time = <TIME> duration = <DURATION> eventName = <STRING>
    {
        IEvent event = new TODCalendarEvent(eventName, date, time, duration);
        return event;
    }
    | <EVENT> date = <DATE> <ALLDAY> eventName = <STRING>
    {
        IEvent event = new AllDayCalendarEvent(eventName, date);
        return event;
    }
}

Map<String, String> pluginKeyValuePairs() :
{
    Map<String, String> keyValuePairs = new HashMap<>();
    String key;
    String value;
}
{
    "{"
        key = <KEY> ": " value = <STRING>
    {
        keyValuePairs.put(key, value);
    }
    (
        "," key = <KEY> ": " value = <STRING>
        {
            keyValuePairs.put(key, value);
        }
    )*
    "}"
    {
        return keyValuePairs;
    }
}